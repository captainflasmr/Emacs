fundamental-mode ;; Available everywhere

(ja (format-time-string "<%Y-%m-%d>"))
(jT (format-time-string "%Y%m%d%H%M%S"))
(jt (format-time-string "%Y%m%d"))
(ji "(interactive)")
(jl "(lambda ()")

org-mode

(jm "#+hugo: more")
(jg "#+attr_org: :width 300px" n "#+attr_html: :width 100%")
(je "#+attr_org: :width 300px" n "#+attr_html: :class emacs-img")
(jo "---" n "#+TOC: headlines 1 local" n "---")
(jk "#+begin: kanban :layout (\"...\" . 40) :scope nil :range (\"TODO\" . \"DONE\") :sort \"O\" :depth 2 :compressed t" n "#+end:")
(jp "~--APT--~ ")

sh-mode
(jd n "echo \"poop: " p "\"" n)

emacs-lisp-mode
(jd n "(message \"poop: " p "\"\)" n)

ada-mode
(jd n> "Ada.Text_Io.Put_Line \( \"poop: " p "\"\);" n)

c++-mode
(jd n> "std::cout << \"poop: " p "\" << std::endl;" n)

c-mode
(jd n> "fprintf(stderr, \"poop: " p "\"\);" n)
