#+title: Simple emacs configuration
#+options: toc:nil
#+property: header-args :tangle ~/.emacs.d/init.el
#+startup: contents

#+begin_src elisp

  (require 'org)
  (require 'grep)
  (require 'bookmark)
  (require 'dired)

  ;; don't resize framee
  (setq frame-inhibit-implied-resize t)

  ;; inhibit startup screen
  (setq inhibit-startup-screen t)

  ;; title bar to print full path of visited filename
  (setq frame-title-format "%f")

  ;; turn on font-lock mode which shows colouring and formatting
  (global-font-lock-mode t)

  ;; enable(1) disable(-1) tool-bar / scroll-bar / menu-bar
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)

  ;; save the desktop state including frames / buffers and splits
  (desktop-save-mode -1)

  ;; show parenthesis matching
  (show-paren-mode t)

  ;; remember recent files opened
  (recentf-mode 1)
  (setq recentf-max-menu-items 200)
  (setq recentf-max-saved-items 200)

  ;; reverts externally changed files
  (global-auto-revert-mode t)

  ;; turn off audible bell
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)

  ;; make ^K kill thru newline
  (setq kill-whole-line t)

  ;; minibuffer completion for file and buffer switching
  (ido-mode 1)
  (setq ido-everywhere 1)
  (setq ido-default-buffer-method 'selected-window)
  (setq ido-default-file-method 'selected-window)
  (icomplete-mode 1)
  (fido-mode 1)

  ;; minibuffer history to be saved
  (savehist-mode 1)

  ;; adds the column number in the modeline
  (column-number-mode 1)

  ;; revert windows with winner-undo
  (winner-mode 1)

  ;; always confirm before exiting emacs
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; turn off highlighting the selected line
  (global-hl-line-mode -1)

  (setq custom-safe-themes t)

  ;; always try and figure out which window to copy / move file
  (setq dired-dwim-target t)

    ;; set up simple completion
  (setq-default abbrev-mode t)

  (setq hippie-expand-try-functions-list
        '(try-complete-file-name-partially try-complete-file-name
                                           try-expand-all-abbrevs try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill
                                           try-complete-lisp-symbol-partially try-complete-lisp-symbol))

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-enabled-themes '(wombat))
   '(warning-suppress-log-types '((frameset)))
   '(warning-suppress-types '((frameset))))

  ;; keybindings
  (global-set-key (kbd "M-'") #'set-mark-command)
  (global-set-key (kbd "C-x [") #'beginning-of-buffer)
  (global-set-key (kbd "C-x ]") #'end-of-buffer)
  (global-set-key (kbd "C-x s") #'save-buffer)
  (global-set-key (kbd "M-m") #'(lambda ()(interactive)(scroll-down (/ (window-height) 4))))
  (global-set-key (kbd "M-n") #'(lambda ()(interactive)(scroll-up (/ (window-height) 4))))
  (global-set-key (kbd "C-o") #'other-window)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x j") 'winner-undo)
  (global-set-key (kbd "C-x k") 'winner-redo)
  (global-set-key (kbd "M-0") 'delete-window)
  (global-set-key (kbd "M-1") #'delete-other-windows)
  (global-set-key (kbd "M-2") #'split-window-vertically)
  (global-set-key (kbd "M-3") #'split-window-horizontally)
  (global-set-key (kbd "M-k") #'delete-other-windows)
  (global-set-key (kbd "M-j") #'split-window-vertically)
  (global-set-key (kbd "M-l") #'split-window-horizontally)
  (global-set-key (kbd "M-;") 'my/comment-or-uncomment)
  (global-set-key (kbd "M-[") #'yank)
  (global-set-key (kbd "M-]") #'yank-pop)
  (global-set-key (kbd "M-e") #'dired-jump)
  (global-set-key (kbd "M-u") #'tab-bar-switch-to-prev-tab)
  (global-set-key (kbd "M-i") #'tab-bar-switch-to-next-tab)
  (global-set-key (kbd "M-s h") #'my/mark-block)
  (global-set-key (kbd "M-s ,") #'my/mark-line)
  (global-set-key (kbd "M-s f") #'my/find-file)
  (global-set-key (kbd "M-s v") #'eval-expression)
  (global-set-key (kbd "M-9") #'hippie-expand)
  (global-set-key (kbd "M-s g") #'rgrep)
  (global-set-key (kbd "C-=") (lambda ()(interactive)(text-scale-adjust 1)))
  (global-set-key (kbd "C--") (lambda ()(interactive)(text-scale-adjust -1)))
  (global-set-key (kbd "C-x l") #'scroll-lock-mode)
  (global-set-key (kbd "M-g i") 'imenu)
  (global-set-key (kbd "C-c d") #'my/dired-duplicate-file)
  (global-set-key (kbd "C-c u") #'my/dired-du)
  (global-set-key (kbd "M-/") #'my/switch-to-thing)
  (global-set-key (kbd "C-@") #'my/shell-create)

  ;; hooks
  (defun disable-M-h ()
    (local-unset-key (kbd "M-h")))
  (add-hook 'org-mode-hook 'disable-M-h)

  ;; scrolling
  (setq scroll-margin 20)
  (setq scroll-preserve-screen-position t)

  ;; trash and backup in seperate location
  (setq delete-by-moving-to-trash t)
  (setq make-backup-files t)
  (setq backup-directory-alist '(("." . "~/backup"))
        backup-by-copying t ; Don't delink hardlinks
        version-control t ; Use version numbers on backups
        delete-old-versions t; automatically delete excess backups
        kept-new-versions 10 ; how many of the newest versions to keep
        kept-old-versions 5); how many of the old

  ;; delete selected text, may be more intuitive for newbie
  (setq delete-selection-mode nil)

  ;; allows all local variables for less friction
  (setq enable-local-variables :all)

  ;; no line wrapping
  (setq-default truncate-lines t)

  ;; indent using spaces
  (setq-default indent-tabs-mode nil)

  ;; tab indent
  (setq-default tab-width 4)

  ;; dired
  (setq dired-listing-switches "-alGgh")

  ;; grep
  (eval-after-load 'grep
    '(progn
       (dolist (dir '("nas" ".cache" "cache" "elpa" "chromium" ".local/share" "syncthing" ".mozilla" ".local/lib" "Games"))
         (push dir grep-find-ignored-directories))
       (dolist (file '(".cache" "*cache*" "*.iso" "*.xmp" "*.jpg" "*.mp4"))
         (push file grep-find-ignored-files))
       ))

  ;; jump map keybindings
  (defvar my-jump-keymap (make-sparse-keymap))
  (global-set-key (kbd "M-o") my-jump-keymap)

  (define-key my-jump-keymap (kbd "n") (lambda () (interactive) (find-file "~/nas")))
  (define-key my-jump-keymap (kbd "e") (lambda () (interactive) (find-file "~/.emacs.d/init.el")))
  (define-key my-jump-keymap (kbd "f") #'find-name-dired)
  (define-key my-jump-keymap (kbd "g") (lambda () (interactive) (find-file "~/.config")))
  (define-key my-jump-keymap (kbd "j") (lambda () (interactive) (find-file "~/DCIM/content/aaa--todo.org")))
  (define-key my-jump-keymap (kbd "l") #'recentf-open-files)
  (define-key my-jump-keymap (kbd "m") #'customize-themes)
  (define-key my-jump-keymap (kbd "o") #'bookmark-jump)
  (define-key my-jump-keymap (kbd "h") (lambda () (interactive) (find-file "~")))
  (define-key my-jump-keymap (kbd "k") (lambda () (interactive) (find-file (concat user-emacs-directory "emacs--simple.org"))))
  (define-key my-jump-keymap (kbd "w") (lambda () (interactive) (find-file "~/DCIM/content")))
  (define-key my-jump-keymap (kbd "-") #'tab-close)
  (define-key my-jump-keymap (kbd "=") (lambda () (interactive) (tab-bar-new-tab-to -1)))

  ;; visual changes map keybindings
  (defvar my-win-keymap (make-sparse-keymap))
  (global-set-key (kbd "C-q") my-win-keymap)

  (define-key my-win-keymap (kbd "b") #'(lambda () (interactive)(tab-bar-mode 'toggle)))
  (define-key my-win-keymap (kbd "c") #'display-fill-column-indicator-mode)
  (define-key my-win-keymap (kbd "d") #'window-divider-mode)
  (define-key my-win-keymap (kbd "e") #'whitespace-mode)
  (define-key my-win-keymap (kbd "f") #'font-lock-mode)
  (define-key my-win-keymap (kbd "h") #'global-hl-line-mode)
  (define-key my-win-keymap (kbd "l") #'my/sync-tab-bar-to-theme)
  (define-key my-win-keymap (kbd "m") #'my/load-theme)
  (define-key my-win-keymap (kbd "n") #'display-line-numbers-mode)
  (define-key my-win-keymap (kbd "p") #'variable-pitch-mode)
  (define-key my-win-keymap (kbd "q") #'toggle-menu-bar-mode-from-frame)
  (define-key my-win-keymap (kbd "v") #'visual-line-mode)

  ;; functions
  (defun my/load-theme ()
    "Prompt to select a theme from available themes and load the selected theme."
    (interactive)
    (let ((theme (completing-read "Choose theme: " (mapcar 'symbol-name (custom-available-themes)))))
      (load-theme (intern theme) t)))

  (defun my/switch-to-thing ()
    "Switch to a buffer, open a recent file, jump to a bookmark,
                           or change the theme from a unified interface."
    (interactive)
    (let* ((buffers (mapcar #'buffer-name (buffer-list)))
           (recent-files recentf-list)
           (bookmarks (bookmark-all-names))
           (all-options (append buffers recent-files bookmarks))
           (selection (completing-read "Switch to: "
                                       (lambda (str pred action)
                                         (if (eq action 'metadata)
                                             '(metadata . ((category . file)))
                                           (complete-with-action action all-options str pred)))
                                       nil t nil 'file-name-history)))
      (pcase selection
        ((pred (lambda (sel) (member sel buffers))) (switch-to-buffer selection))
        ((pred (lambda (sel) (member sel bookmarks))) (bookmark-jump selection))
        (_ (find-file selection)))))

  (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "C-o") nil))

  (defun my/dired-du ()
    "Run 'du -hc' on the directory under the cursor in Dired."
    (interactive)
    (let ((current-dir (dired-get-file-for-visit)))
      (if (file-directory-p current-dir)
          (dired-do-async-shell-command "du -hc" nil (list current-dir))
        (message "The current point is not a directory."))))

  (defun my/sync-tab-bar-to-theme ()
    "Synchronize tab-bar faces with the current theme."
    (interactive)
    (set-face-attribute 'mode-line-active nil :height 120 :underline nil :overline nil :box nil
                        :inherit 'highlight :foreground "#000000")
    (set-face-attribute 'mode-line-inactive nil :height 120 :underline nil :overline nil
                        :background "#151515" :foreground "#cacaca")
    (let ((default-bg (face-background 'default))
          (default-fg (face-foreground 'default))
          (default-hl (face-background 'highlight))
          (inactive-fg (face-foreground 'mode-line-inactive)))
      (custom-set-faces
       `(tab-bar ((t (:inherit default :background ,default-bg :foreground ,default-fg))))
       `(tab-bar-tab ((t (:inherit 'highlight :background ,default-hl :foreground "#000000"))))
       `(tab-bar-tab-inactive ((t (:inherit default :background ,default-bg :foreground ,inactive-fg)))))))

  (defun my/shell-create (name)
    "Create a custom-named eshell buffer with NAME."
    (interactive "sName: ")
    (eshell 'new)
    (let ((new-buffer-name (concat "*eshell-" name "*")))
      (rename-buffer new-buffer-name t)))

  (defun my/dired-duplicate-file (arg)
    "Duplicate a file from DIRED with an incremented number.
        If ARG is provided, it sets the counter."
    (interactive "p")
    (let* ((file (dired-get-file-for-visit))
           (dir (file-name-directory file))
           (name (file-name-nondirectory file))
           (base-name (file-name-sans-extension name))
           (extension (file-name-extension name t))
           (counter (if arg (prefix-numeric-value arg) 1))
           (new-file))
      (while (and (setq new-file
                        (format "%s%s_%03d%s" dir base-name counter extension))
                  (file-exists-p new-file))
        (setq counter (1+ counter)))
      (if (file-directory-p file)
          (copy-directory file new-file)
        (copy-file file new-file))
      (dired-revert)))

  (defun my/find-file ()
    "Find file from current directory in many different ways."
    (interactive)
    (let* ((find-options '(("find -type f -printf \"$PWD/%p\\0\"" . :string)
                           ("fd --absolute-path --type f -0" . :string)
                           ("rg --follow --files --null" . :string)
                           ("find-name-dired" . :command)))
           (selection (completing-read "Select : " find-options))
           (metadata '((category . file)))
           (file-list)
           (file))
      (pcase (alist-get selection find-options nil nil #'string=)
        (:command
         (call-interactively (intern selection)))
        (:string
         (setq file-list (split-string (shell-command-to-string selection) "\0" t))
         (setq file (completing-read (format "Find file in %s: " (abbreviate-file-name default-directory))
                                     (lambda (str pred action)
                                       (if (eq action 'metadata)
                                           `(metadata . ,metadata)
                                         (complete-with-action action file-list str pred)))
                                     nil t nil 'file-name-history))))
      (when file (find-file (expand-file-name file)))))

  (defun my/mark-line ()
    "Mark whole line."
    (interactive)
    (beginning-of-line)
    (push-mark (point) nil t)
    (end-of-line))

  (defun my/mark-block ()
    "Marking a block of text surrounded by a newline."
    (interactive)
    (when (not (region-active-p))
      (backward-char))
    (skip-chars-forward " \n\t")
    (re-search-backward "^[ \t]*\n" nil 1)
    (skip-chars-forward " \n\t")
    (when (not (region-active-p))
      (push-mark))
    (re-search-forward "^[ \t]*\n" nil 1)
    (skip-chars-backward " \n\t")
    (setq mark-active t))
  (global-unset-key (kbd "C-z"))

  (defun my/comment-or-uncomment ()
    "Comments or uncomments the current line or region."
    (interactive)
    (if (region-active-p)
        (comment-or-uncomment-region
         (region-beginning)(region-end))
      (comment-or-uncomment-region
       (line-beginning-position)(line-end-position))))

  ;; theme / visual settings
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "DejaVu Sans" :height 110 :weight normal))))
   '(fixed-pitch ((t ( :family "Source Code Pro" :height 110)))))

  (setq font-general "Source Code Pro 11")
  (set-frame-font font-general nil t)

  (add-to-list 'default-frame-alist `(font . ,font-general))

#+end_src
